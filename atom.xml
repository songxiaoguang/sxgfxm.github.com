<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2016-03-30T23:55:53+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daily Check - 2016-03-30]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/30/daily-check-2016-03-30/"/>
    <updated>2016-03-30T23:52:16+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/30/daily-check-2016-03-30</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS - 应用开发基础知识梳理]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/30/ios-ying-yong-kai-fa-ji-chu-zhi-shi-shu-li/"/>
    <updated>2016-03-30T08:38:24+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/30/ios-ying-yong-kai-fa-ji-chu-zhi-shi-shu-li</id>
    <content type="html"><![CDATA[<p>这篇文章主要自己对iOS应用开发基础知识的梳理，用于基础知识的复习巩固，也可作为笔试、面试的资料。本人作为iOS开发初学者，能力有限，如果不足之处请多多包涵和在评论指出，一定及时更新回复。</p>

<h2>目录</h2>

<ul>
<li>Objective-C语言相关</li>
<li>Objective-C语法相关</li>
</ul>


<h2>Objective-C语言相关</h2>

<ul>
<li>面向对象编程特点

<ul>
<li>封装：把数据及操作这些数据的方法封装为类，只对外暴露接口使用；</li>
<li>继承：子类可以继承父类的变量和方法，提高代码重用性，单继承特性；</li>
<li>多态：子类对象可以赋值给父类对象；不同对象对相同的消息做出不同的响应。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>动态语言特性

<ul>
<li>动态类型定义：在代码中对象定义为id类型，直到运行时才确定类型；</li>
<li>动态内存分配：在运行时，类创建新对象；</li>
<li>动态消息绑定：在运行时，匹配消息中的selector与receiver中的方法实现。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>动态类型定义

<ul>
<li>使用id类型定义的对象，在运行时才知道该对象属于哪个类；</li>
<li>运行时系统会查询该对象的isa指针，从而知道它属于哪个类；</li>
<li>动态类型定义是动态绑定的基础。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>动态消息绑定

<ul>
<li>对message做出反应的method直到程序运行时才能确定；</li>
<li>function和parameters在编译时就被绑定到一起；</li>
<li>receiver和message直到程序运行且message被发出时才被绑定到一起；</li>
<li>动态消息绑定使每个对象都可以有某一方法的个性化版本；</li>
<li>通过改变receiver，且receiver运行时才能确定，从而同一message产生不同的结果；</li>
<li>receiver的确定受用户操作影响；</li>
<li>消息发送者不必在意谁接收该消息，不同的接收方会采取个性化操作；</li>
<li>消息本身也可以动态确定。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>消息传递机制

<ul>
<li>给某个对象发送一个消息，该对象根据消息采取特定的操作。</li>
<li>发出消息——>运行时消息处理例程获取receiver和消息中的selector<br/>
——>查找接收器中的同名方法——>把接收器的实例变量传递给这个方法——>调用该方法。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>静态语言特性

<ul>
<li>静态类型定义：使用类名直接定义对象，增加给编译器和读者的信息量；</li>
<li>动态内存分配：并不影响该对象在运行时如何创建；</li>
<li>动态消息绑定：并不影响该对象接受消息的方式。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>静态类型定义

<ul>
<li>直接使用类名定义的对象，在编译时即知道该对象属于哪个类；</li>
<li>静态类型定义的对象，编译器可以对其进行类型检查；</li>
<li>可静态定义某对象为其父类对象。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>动态行为与静态行为比较

<ul>
<li>动态行为的优点：使面向对象编程更加灵活，强大。</li>
<li>动态行为的缺点：无法进行类型检查，运行时容易出错；消息传递比函数调用慢。</li>
<li>静态行为的优点

<ul>
<li>允许编译时进行类型检查：

<ul>
<li>当向一个静态定义的receiver发送消息时，编译器可检查其是否可以响应；</li>
<li>当静态定义的对象赋值给一个静态定义的变量时，编译器可检查类型是否一致。</li>
</ul>
</li>
<li>打破同名方法需要相同的返回值和参数类型的限制：
  通常，不同类的同名方法需要有相同的返回值和参数类型，来使编译器允许动态绑定，因为编译器不知道接收器属于哪个类，所以只创建一个方法描述。当接收器为静态定义的对象时，编译器在编译时就知道其所属类的信息，可以为其单独创建方法描述，从而打破同名限制。</li>
<li>允许使用->来访问实例变量。</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>协议Protocol

<ul>
<li>协议声明了一组方法，这组方法可以被所有类实现；</li>
<li>遵守某协议需要实现该协议中@required修饰的方法；</li>
<li>使用协议的三种情况：

<ul>
<li>声明想让其他类实现的方法（代理设计模式时采用）；</li>
<li>声明interface并隐藏它的类；</li>
<li>实现类之间共享某些方法。</li>
</ul>
</li>
<li>协议是独立存在的，协议的创建不需要与任何类建立联系；</li>
<li>协议声明了一组方法，并不与类建立连接，把方法从类的结构中解放出来；</li>
<li>协议不关心具体哪个类实现了自己，只关心这个类是否完整实现了自己声明的所有需要实现的方法；</li>
<li>协议使实现该协议的类具有相似的方法集，不需要有继承关系；</li>
<li>对象可以按类划分，也可以按协议划分；</li>
<li>继承：向类中添加父类中的方法；</li>
<li>协议：向类中添加协议中的方法；</li>
<li>正式协议：</li>
<li>非正式协议：</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>类别Category

<ul>
<li>类别可以实现在不修改源代码的情况下，为类添加方法；</li>
<li>类别一般只可以添加方法，可以通过Runtime实现添加属性；</li>
<li>类别扩充了类的功能，而不必通过子类来实现，且添加的方法与类中的方法地位相同；</li>
<li>类别可以把类的实现放在不同的文件中；</li>
<li>如果扩展的方法与原始类中的方法相同，则会隐藏原始方法；</li>
<li>不可在扩展方法中通过super调用原始方法；</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>扩展Extention

<ul>
<li>扩展可以在源代码的基础上，添加方法和属性；</li>
<li>扩展允许一个类拥有一个私有的interface，且可由编译器验证。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>内存管理机制

<ul>
<li>Reference Count，引用计数。通过对象的引用计数来判断是否释放该对象，当对象的引用计数为0时，系统会调用dealloc方法来释放该对象；</li>
<li>retain，retainCount++；release，retainCount&ndash;；</li>
<li>黄金法则：通过alloc、new、copy获取的对象，需要对其使用release或autorelease释放。</li>
<li>MRC，手动内存管理，</li>
<li>ARC，自动内存管理，iOS 5.0后采用，编译时自动插入retain、release和autorelease，<br/>
减轻开发者负担，但只针对Foundation框架下的对象；</li>
<li>GC：垃圾回收机制，运行时周期性的检查是否有不再使用的对象并进行释放，<br/>
iOS不支持垃圾回收机制。</li>
<li>非ARC工程中采用ARC去编译某些类：-fobjc-arc；</li>
<li>在ARC工程中采用MRC去编译某些类：-fno-fobjc-arc;</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>属性Property

<ul>
<li>提供了一种清晰、准确的描述，accessor方法是如何工作的；</li>
<li>编译器可以自动生成访问实例变量的方法，减少代码量；</li>
<li>@synthesize告诉编译器实现响应的accessor方法，@dynamic动态实现；</li>
<li>属性修饰词：

<ul>
<li>设置accessor方法的名字

<ul>
<li>getter = getterName</li>
<li>setter = setterName</li>
<li>默认getter = propertyName，setter = setPropertyName：</li>
</ul>
</li>
<li>设置property的可写性

<ul>
<li>readwrite：可读可写，默认；</li>
<li>readonly：只可读，不会生成setter方法；</li>
</ul>
</li>
<li>设置proper的原子性

<ul>
<li>atomic：原子的，保证访问时线程安全，开销大；</li>
<li>nonatomic：非原子的，当确定该属性不会多线程访问时采用，节省开销；</li>
</ul>
</li>
<li>设置setter方法的语义

<ul>
<li>assign：常用于修饰基本数据类型，默认；</li>
<li>copy：当该对象被拷贝时，向该对象发送release消息；</li>
<li>retain：赋值时先release旧值，再retain新值，常用语对象；</li>
<li>strong：与目标对象有strong relationship</li>
<li>weak：与目标对象有weak relationship。当目标对象被释放时，该属性值自动置nil；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><h2>强引用与弱引用</h2></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件破解记录]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/30/ruan-jian-po-jie-ji-lu/"/>
    <updated>2016-03-30T08:29:53+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/30/ruan-jian-po-jie-ji-lu</id>
    <content type="html"><![CDATA[<h3>MarkdownPad2.5注册码</h3>

<p>授权邮箱：</p>

<pre><code>Soar360@live.com
</code></pre>

<p>授权秘钥：</p>

<pre><code>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==
</code></pre>

<p>感谢<a href="http://www.jianshu.com/p/9e5cd946696d">MarkdownPad2.5注册码</a>提供资源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS - RunLoop初探]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/ios-runloopchu-tan/"/>
    <updated>2016-03-29T19:39:29+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/ios-runloopchu-tan</id>
    <content type="html"><![CDATA[<h3>目录</h3>

<ul>
<li>Runloop的概念</li>
<li>Runloop与线程的关系</li>
<li>Runloop对外的接口</li>
<li>Runloop的Mode</li>
<li>Runloop的内部逻辑</li>
<li>Runloop的底层实现</li>
<li>基于Runloop的功能

<ul>
<li>AutoreleasePool</li>
<li>事件响应</li>
<li>手势识别</li>
<li>界面更新</li>
<li>定时器</li>
<li>PerformSelecter</li>
<li>关于GCD</li>
<li>关于网络请求</li>
<li>AFNetworking</li>
</ul>
</li>
</ul>


<!-- more -->


<h3>RunLoop的概念</h3>

<p>Runloop，简单来讲就是一个“运行着的循环”，而这个循环的目的是保持事件处理能力，不会执行完一个事件就退出。比如不规则的循环处理，一个保持运行状态的App，能够随时对用户的操作做出响应，并在无用户操作的情况下休眠以降低开销；再如规则的循环处理，开启的计时器NSTimer，周期性的响应某一事件，直到定时器销毁。</p>

<p>对Runloop的理解需要把握两个关键点： <br/>
- 保持对事件、消息的响应能力，直到退出；<br/>
- 当无事件、消息需要处理时，休眠以降低开销；</p>

<p>贴近编程来讲，当我们开启一个线程执行某一任务，当该任务执行完毕后，线程会退出销毁。<br/>
如果想让线程能随时执行任务并不退出，就需要上面谈到的“运行着的循环”Runloop来实现，<br/>
通常的代码逻辑如下：</p>

<pre><code>function loop() {
    initialize();
    do {
        var message = get_next_message();
        process_message(message);
    } while (message != quit);
}
</code></pre>

<p>这种模型通常被称作<strong>Event Loop</strong>。实现这种模型的关键点在于：<br/>
- 如何管理事件、消息；<br/>
- 如何让线程在没有处理消息时休眠以避免资源占用，在有消息到来时立刻被唤醒。</p>

<p>所以，Runloop实际就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面Event Loop的逻辑。<br/>
线程执行了这个函数后，就会一直处于这个函数内部“接受消息->等待->处理”的循环中，直到循环结束（比如传入quit消息），函数返回。</p>

<p>OS X/iOS 系统中，提供了两个这样的对象：<strong>NSRunLoop</strong>和<strong>CFRunLoopRef</strong>。</p>

<p>CFRunLoopRef是在CoreFundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。</p>

<p>NSRunLoop是基于CFRunLoop的封装，提供了面向对象的API，但这些API不是线程安全的。</p>

<h3>RunLoop与线程的关系</h3>

<p>通过Runloop的引入，我们很容易发现RunLoop与线程是密不可分的，Runloop是为线程服务的，使线程拥有持续响应事件的能力并在无事件时休眠。下面来看Runloop与线程到底什么关系。</p>

<p>苹果不允许直接创建RunLoop，它只提供了两个自动获取的函数：CFRunLoopGetMain()和CFRunLoopGetCurrent()。这两个函数内部的逻辑大概如下：</p>

<pre><code>/// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef
static CFMutableDictionaryRef loopsDic;
/// 访问 loopsDic 时的锁
static CFSpinLock_t loopsLock;

/// 获取一个 pthread 对应的 RunLoop。
CFRunLoopRef _CFRunLoopGet(pthread_t thread) {
    OSSpinLockLock(&amp;loopsLock);

    if (!loopsDic) {
        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。
        loopsDic = CFDictionaryCreateMutable();
        CFRunLoopRef mainLoop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);
    }

    /// 直接从 Dictionary 里获取。
    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));

    if (!loop) {
        /// 取不到时，创建一个
        loop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, thread, loop);
        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。
        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);
    }

    OSSpinLockUnLock(&amp;loopsLock);
    return loop;
}

CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGet(pthread_main_thread_np());
}

CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGet(pthread_self());
}
</code></pre>

<p>从上面代码可以看出：</p>

<ol>
<li><p>线程和RunLoop之间是<strong>一一对应</strong>的，其关系保存在一个全局的Dictionary里。</p></li>
<li><p>线程创建时并没有RunLoop（符合一般情况下线程的状态），只有当调用上述两个接口主动获取，且只在第一次获取时创建RunLoop，并加入到全局的Dictionary里。</p></li>
<li><p>初始化全局Dictionary时，会为主线程创建一个RunLoop。<br/>
即主线程默认开启Runloop（符合App启动后可以保持事件处理能力）。</p></li>
<li><p>当线程结束时，会销毁该线程的RunLoop。</p></li>
</ol>


<h3>RunLoop对外的接口</h3>

<p>在CoreFoundation里关于RunLoop有5个类：</p>

<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopTimerRef</li>
<li>CFRunLoopObserverRef</li>
</ul>


<p>其中CFRunLoopModeRef类并没有对外暴露，只是通过CFRunLoopRef的接口进行了封装，它们的关系如下：</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png" alt="" /></p>

<ul>
<li><p>一个RunLoop包含若干个<strong>Mode</strong>；</p></li>
<li><p>每个Mode又包含若干个<strong>Source</strong>/<strong>Observer</strong>/<strong>Timer</strong>；</p></li>
<li><p>每次调用RunLoop的主函数时，只能指定其中一个Mode，这个Mode被称作<strong>CurrentMode</strong>；</p></li>
<li><p>如果需要切换Mode，只能退出Loop，再重新指定一个Mode进入。这样做主要是为了分割开不同组的Source/Observer/Timer，让其互不影响。</p></li>
</ul>


<p><strong>CFRunLoopSourceRef</strong>是事件产生的地方。Source有两个版本：</p>

<ul>
<li><p><strong>Source0</strong>只包含了一个回调指针，它并不能主动出发事件。使用时需要先调用CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</p></li>
<li><p><strong>Source1</strong>包含了一个<strong>mach_port</strong>和一个回调指针，被用于通过内核和其他线程相互发送消息。这种Source能主动唤醒RunLoop的线程。</p></li>
</ul>


<p><strong>CFRunLoopTimerRef</strong>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p>

<p><strong>CFRunLoopObserveRef</strong>是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：</p>

<pre><code>typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop
    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer
    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source
    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠
    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒
    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop
};
</code></pre>

<p>上面的Source/Timer/Observer被统称为<strong>mode item</strong>。一个item可以被同时加入多个mode，但一个item被重复加入同一个mode时是不会有效果的。如果一个mode中一个item都没有，则RunLoop会直接退出，不进入循环。</p>

<h3>RunLoop的Mode</h3>

<p>CFRunLoopMode和CFRunLoop的结构大致如下：</p>

<pre><code>struct __CFRunLoopMode {
    CFStringRef _name;            // Mode Name, 例如 @"kCFRunLoopDefaultMode"
    CFMutableSetRef _sources0;    // Set
    CFMutableSetRef _sources1;    // Set
    CFMutableArrayRef _observers; // Array
    CFMutableArrayRef _timers;    // Array
    ...
};

struct __CFRunLoop {
    CFMutableSetRef _commonModes;     // Set
    CFMutableSetRef _commonModeItems; // Set
    CFRunLoopModeRef _currentMode;    // Current Runloop Mode
    CFMutableSetRef _modes;           // Set
    ...
};
</code></pre>

<p>由上述数据结构可知：</p>

<ul>
<li><p>CFRunLoopMode包含mode name和Source/Timer/Observer；</p></li>
<li><p>CFRunLoop包含<strong>CommonModes</strong>，<strong>CommonModeItems</strong>，<strong>CurrentMode</strong>，<strong>Modes</strong></p></li>
</ul>


<p><strong>CommonModes</strong>，一个Mode可以将自己标记为<strong>Common</strong>属性（通过将其ModeName添加到RunLoop的CommonModes中）。每当RunLoop的内容发生变化时，Runloop都会自动将CommonModeItems里的Source/Observer/Timer同步到具有Common标记的所有Mode里。</p>

<p>应用场景举例：主线程的 RunLoop 里有两个预置的 Mode：<strong>kCFRunLoopDefaultMode</strong> 和 <strong>UITrackingRunLoopMode</strong>。这两个 Mode 都已经被标记为"Common"属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p>

<p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 RunLoop 的 &ldquo;commonModeItems&rdquo; 中。"commonModeItems" 被 RunLoop 自动更新到所有具有"Common"属性的 Mode 里去。</p>

<p>CFRunLoop对外暴露的管理Mode接口只有如下两个：</p>

<pre><code>CFRunLoopAddCommonMode(CFRunLoopRef runloop,CFStringRef modeName);
CFRunLoopRunInMode(CFStringRef modeName,...);
</code></pre>

<p>CFRunLoopMode暴露的管理mode item的接口有如下几个：</p>

<pre><code>CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);
CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);
CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);
CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);
CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
</code></pre>

<p>你只能通过mode name来操作内部的mode，当你传入一个新的mode name但RunLoop内部没有对应mode时，RunLoop会自动帮你创建对应的CFRunLoopModeRef。对于一个RunLoop来说，其内部的mode只能增加不能删除。</p>

<p>苹果公开提供的 Mode 有两个：kCFRunLoopDefaultMode (NSDefaultRunLoopMode) 和 UITrackingRunLoopMode，你可以用这两个 Mode Name 来操作其对应的 Mode。</p>

<p>同时苹果还提供了一个操作 Common 标记的字符串：kCFRunLoopCommonModes (NSRunLoopCommonModes)，你可以用这个字符串来操作 Common Items，或标记一个 Mode 为 &ldquo;Common"。使用时注意区分这个字符串和其他 mode name。</p>

<h3>RunLoop的内部逻辑</h3>

<p>根据苹果在文档里的说明，RunLoop内部的逻辑大致如下：</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432798974517485.png" alt="" /></p>

<p>其内部代码整理如下：</p>

<pre><code>/// 用DefaultMode启动
void CFRunLoopRun(void) {
    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
}

/// 用指定的Mode启动，允许设置RunLoop超时时间
int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {
    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
}

/// RunLoop的实现
int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {

/// 首先根据modeName找到对应mode
CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);

/// 如果mode里没有source/timer/observer, 直接返回。
if (__CFRunLoopModeIsEmpty(currentMode)) return;

/// 1. 通知 Observers: RunLoop 即将进入 loop。
__CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);

/// 内部函数，进入loop
__CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {

    Boolean sourceHandledThisLoop = NO;
    int retVal = 0;
    do {

        /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。
        __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);
        /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。
        __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);
        /// 执行被加入的block
        __CFRunLoopDoBlocks(runloop, currentMode);

        /// 4. RunLoop 触发 Source0 (非port) 回调。
        sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);
        /// 执行被加入的block
        __CFRunLoopDoBlocks(runloop, currentMode);

        /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。
        if (__Source0DidDispatchPortLastTime) {
            Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)
            if (hasMsg) goto handle_msg;
        }

        /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。
        if (!sourceHandledThisLoop) {
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);
        }

        /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。
        /// ? 一个基于 port 的Source 的事件。
        /// ? 一个 Timer 到时间了
        /// ? RunLoop 自身的超时时间到了
        /// ? 被其他什么调用者手动唤醒
        __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) {
            mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg
        }

        /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。
        __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);

        /// 收到消息，处理消息。
        handle_msg:

        /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。
        if (msg_is_timer) {
            __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())
        } 

        /// 9.2 如果有dispatch到main_queue的block，执行block。
        else if (msg_is_dispatch) {
            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
        } 

        /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件
        else {
            CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);
            sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);
            if (sourceHandledThisLoop) {
                mach_msg(reply, MACH_SEND_MSG, reply);
            }
        }

        /// 执行加入到Loop的block
        __CFRunLoopDoBlocks(runloop, currentMode);


        if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) {
            /// 进入loop时参数说处理完事件就返回。
            retVal = kCFRunLoopRunHandledSource;
        } else if (timeout) {
            /// 超出传入参数标记的超时时间了
            retVal = kCFRunLoopRunTimedOut;
        } else if (__CFRunLoopIsStopped(runloop)) {
            /// 被外部调用者强制停止了
            retVal = kCFRunLoopRunStopped;
        } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {
            /// source/timer/observer一个都没有了
            retVal = kCFRunLoopRunFinished;
        }

        /// 如果没超时，mode里没空，loop也没被停止，那继续loop。
        } while (retVal == 0);
    }

    /// 10. 通知 Observers: RunLoop 即将退出。
    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
}
</code></pre>

<p>可以看到，实际上RunLoop就是这样一个函数，其内部是一个do-while循环。当你调用CFRunLoopRun()时，线程就会一直停留在这个循环里，直到超时或被手动停止，该函数才会返回。</p>

<h3>RunLoop的底层实现</h3>

<p>从上面代码可以看到，RunLoop的核心是基于mach port的，其进入休眠时调用的函数为mach_msg()。为了解释这个逻辑，下面稍微介绍一下iOS系统架构。</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432799001829463.png" alt="" /></p>

<p>苹果官方将整个系统大致分为上述4个层次：</p>

<ol>
<li>应用层包括用户能接触到的图形应用，例如 Spotlight、Aqua、SpringBoard 等。</li>
<li>应用框架层即开发人员接触到的 Cocoa 等框架。</li>
<li>核心框架层包括各种核心框架、OpenGL 等内容。</li>
<li>Darwin 即操作系统的核心，包括系统内核、驱动、Shell 等内容，这一层是开源的，其所有源码都可以在 opensource.apple.com 里找到。</li>
</ol>


<p>深入看<strong>Darwin</strong>这个核心架构：</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432799031419231.png" alt="" /></p>

<p>其中，在硬件层上面的三个组成部分：Mach、BSD、IOKit (还包括一些上面没标注的内容)，共同组成了 XNU 内核。</p>

<p>XNU 内核的内环被称作 Mach，其作为一个微内核，仅提供了诸如处理器调度、IPC (进程间通信)等非常少量的基础服务。</p>

<p>BSD 层可以看作围绕 Mach 层的一个外环，其提供了诸如进程管理、文件系统和网络等功能。</p>

<p>IOKit 层是为设备驱动提供了一个面向对象(C++)的一个框架。</p>

<p>Mach 本身提供的 API 非常有限，而且苹果也不鼓励使用 Mach 的 API，但是这些API非常基础，如果没有这些API的话，其他任何工作都无法实施。在 Mach 中，所有的东西都是通过自己的对象实现的，进程、线程和虚拟内存都被称为"对象"。和其他架构不同， Mach 的对象间不能直接调用，只能通过消息传递的方式实现对象间的通信。"消息"是 Mach 中最基础的概念，消息在两个端口 (port) 之间传递，这就是 Mach 的 IPC (进程间通信) 的核心。</p>

<p>Mach 的消息定义是在头文件的，很简单：</p>

<pre><code>typedef struct {
    mach_msg_header_t header;
    mach_msg_body_t body;
} mach_msg_base_t;

typedef struct {
    mach_msg_bits_t msgh_bits;
    mach_msg_size_t msgh_size;
    mach_port_t msgh_remote_port;
    mach_port_t msgh_local_port;
    mach_port_name_t msgh_voucher_port;
    mach_msg_id_t msgh_id;
} mach_msg_header_t;
</code></pre>

<p>一条 Mach 消息实际上就是一个二进制数据包 (BLOB)，其头部定义了当前端口 local_port 和目标端口 remote_port，</p>

<p>发送和接受消息是通过同一个 API 进行的，其 option 标记了消息传递的方向：</p>

<pre><code>mach_msg_return_t mach_msg(
mach_msg_header_t *msg,
mach_msg_option_t option,
mach_msg_size_t send_size,
mach_msg_size_t rcv_size,
mach_port_name_t rcv_name,
mach_msg_timeout_t timeout,
mach_port_name_t notify);
</code></pre>

<p>为了实现消息的发送和接收，mach_msg() 函数实际上是调用了一个 Mach 陷阱 (trap)，即函数mach_msg_trap()，陷阱这个概念在 Mach 中等同于系统调用。当你在用户态调用 mach_msg_trap() 时会触发陷阱机制，切换到内核态；内核态中内核实现的 mach_msg() 函数会完成实际的工作，如下图：</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432799057446598.png" alt="" /></p>

<p>RunLoop 的核心就是一个 mach_msg() (见上面代码的第7步)，RunLoop 调用这个函数去接收消息，如果没有别人发送 port 消息过来，内核会将线程置于等待状态。例如你在模拟器里跑起一个 iOS 的 App，然后在 App 静止时点击暂停，你会看到主线程调用栈是停留在 mach_msg_trap() 这个地方。</p>

<p>关于具体的如何利用 mach port 发送信息，可以看看<a href="http://nshipster.com/inter-process-communication/"> NSHipster 这一篇文章</a>，或者<a href="http://segmentfault.com/a/1190000002400329">这里</a>的中文翻译 。</p>

<p>关于Mach的历史可以看看这篇很有趣的文章：<a href="http://www.programmer.com.cn/8121/">Mac OS X 背后的故事（三）Mach 之父 Avie Tevanian</a>。</p>

<h3>基于RunLoop的功能</h3>

<h4>AutoreleasePool</h4>

<p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p>

<p>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p>

<p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用<em>objc_autoreleasePoolPop() 和 </em>objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p>

<p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p>

<h4>事件响应</h4>

<p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p>

<p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考这里。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。</p>

<p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p>

<h4>手势识别</h4>

<p>当上面的 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p>

<p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。</p>

<p>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>

<h4>界面更新</h4>

<p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p>

<p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：</p>

<p>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>

<h4>定时器</h4>

<p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p>

<p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p>

<p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop，这个稍后我会再单独写一页博客来分析。</p>

<h4>PerformSelecter</h4>

<p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p>

<p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p>

<h4>关于GCD</h4>

<p>实际上 RunLoop 底层也会用到 GCD 的东西，比如 RunLoop 是用 dispatch_source_t 实现的 Timer。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 dispatch_async()。</p>

<p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 <strong>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</strong>() 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p>

<h4>关于网络请求</h4>

<p>iOS 中，关于网络请求的接口自下至上有如下几层:</p>

<pre><code>CFSocket
CFNetwork       -&gt;ASIHttpRequest
NSURLConnection -&gt;AFNetworking
NSURLSession    -&gt;AFNetworking2, Alamofire
</code></pre>

<ul>
<li>CFSocket 是最底层的接口，只负责 socket 通信。</li>
<li>CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。</li>
<li>NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。</li>
<li>NSURLSession 是 iOS7 中新增的接口，表面上是NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。</li>
</ul>


<p>下面主要介绍下 NSURLConnection 的工作过程。</p>

<p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p>

<p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432799200369980.png" alt="" /></p>

<p>NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。</p>

<h3>AFNetworking</h3>

<p>AFURLConnectionOperation 这个类是基于 NSURLConnection 构建的，其希望能在后台线程接收 Delegate 回调。为此 AFNetworking 单独创建了一个线程，并在这个线程中启动了一个 RunLoop：</p>

<pre><code>+ (void)networkRequestThreadEntryPoint:(id)__unused object {
    @autoreleasepool {
        [[NSThread currentThread] setName:@"AFNetworking"];
        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
        [runLoop run];
    }
}

+ (NSThread *)networkRequestThread {
    static NSThread *_networkRequestThread = nil;
    static dispatch_once_t oncePredicate;
    dispatch_once(&amp;oncePredicate, ^{
        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
        [_networkRequestThread start];
    });
    return _networkRequestThread;
}
</code></pre>

<p>RunLoop 启动前内部必须要有至少一个 Timer/Observer/Source，所以 AFNetworking 在 [runLoop run] 之前先创建了一个新的 NSMachPort 添加进去了。通常情况下，调用者需要持有这个 NSMachPort (mach_port) 并在外部线程通过这个 port 发送消息到 loop 内；但此处添加 port 只是为了让 RunLoop 不至于退出，并没有用于实际的发送消息。</p>

<pre><code>- (void)start {
    [self.lock lock];
    if ([self isCancelled]) {
        [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];
    } else if ([self isReady]) {
        self.state = AFOperationExecutingState;
        [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];
    }
    [self.lock unlock];
}
</code></pre>

<p>当需要这个后台线程执行任务时，AFNetworking 通过调用 [NSObject performSelector:onThread:..] 将这个任务扔到了后台线程的 RunLoop 中。</p>

<h3>参考资料</h3>

<p><a href="http://www.cocoachina.com/ios/20150601/11970.html">深入理解RunLoop</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check Chart]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/daily-check-chart/"/>
    <updated>2016-03-29T12:35:48+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/daily-check-chart</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center;"> Date          </th>
<th style="text-align:center;"> Eating </th>
<th style="text-align:center;"> Maining </th>
<th style="text-align:center;"> Coding </th>
<th style="text-align:center;"> Reading </th>
<th style="text-align:center;"> Testing </th>
<th style="text-align:center;"> Running </th>
<th style="text-align:right;"> Sleepping </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 2016-03-28  </td>
<td style="text-align:center;"> check  </td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>sfsf </th>
<th> skfsd </th>
<th> sfsf</th>
</tr>
</thead>
<tbody>
<tr>
<td>a    </td>
<td> b     </td>
<td> c</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>ABCD </th>
<th> EFGH </th>
<th> IGKL</th>
</tr>
</thead>
<tbody>
<tr>
<td>a    </td>
<td> b    </td>
<td> c</td>
</tr>
<tr>
<td>d    </td>
<td> e    </td>
<td> f</td>
</tr>
<tr>
<td>g    </td>
<td> h    </td>
<td> i</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check - 2016-03-29]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/daily-check-2016-03-29/"/>
    <updated>2016-03-29T12:26:03+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/daily-check-2016-03-29</id>
    <content type="html"><![CDATA[<h3>Achievements</h3>

<ol>
<li><p>成功添加了侧边栏自我介绍、微博、优秀博客、顶部返回按钮、第三方链接新标签打开、首页博文摘要、修改标题图片和添加搜索链接等自定义设置；</p></li>
<li><p>RunLoop初探，对RunLoop的概念、组成、基本原理及使用场景有了基本的了解，还需要深入的理解和编程实践；</p></li>
<li><p>没有做有关毕设的事情。</p></li>
</ol>


<h3>Plans</h3>

<ol>
<li><p>复习RunLoop有关知识，加深理解；</p></li>
<li><p>复习iOS相关面试题；</p></li>
<li><p>查找神经网络相关框架，可以不基于Objective-C。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 界面自定义]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/github-blog-jie-mian-zi-ding-yi/"/>
    <updated>2016-03-29T10:34:13+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/github-blog-jie-mian-zi-ding-yi</id>
    <content type="html"><![CDATA[<h3>添加侧边栏</h3>

<p>首先，在<code>source\_includes\custom\asides\</code>下创建<code>name.html</code>文件，内容遵守如下格式：</p>

<pre><code>&lt;section&gt;
    &lt;h1&gt;Name&lt;/h1&gt;
    &lt;ul id="name"&gt;
    此处填写要插入的内容
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>然后，在<code>_config.yml</code>文件中设置<code>default_asides</code>添加<code>custom\asides\name.html</code>。</p>

<!-- more -->


<h3>博客首页显示文章摘要</h3>

<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置如下： <br/>
首先，在文章中先要展示的缩略部分添加标记：</p>

<pre><code>&lt;!-- more --&gt;
</code></pre>

<p>然后，在<code>_config.yml</code>文件中设置<code>excerpt_link</code>为<code>"Read on &amp;rarr;"</code></p>

<pre><code>excerpt_link: "Read on &amp;rarr;"
</code></pre>

<p>即可显示如下文章摘要效果：</p>

<p><img src="http://i.imgur.com/bUg73nQ.png" alt="" /></p>

<h3>侧边栏增加新浪微博</h3>

<p>首先，要从<a href="http://app.weibo.com/tool/weiboshow">新浪微博秀</a>获取到自定义的微博秀代码，设定好样式后将代码复制，在<code>source/_includes/custom/asides</code>目录下创建<code>weibo.html</code>，并按添加侧边栏格式插入获取的代码。</p>

<p>然后，在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>

<h3>添加返回顶部按钮</h3>

<p>首先，创建<code>source/javascripts/top.js</code>，并添加如下代码设置返回按钮事件：</p>

<pre><code>function goTop(acceleration, time)
{
    acceleration = acceleration || 0.1;
    time = time || 16;

    var x1 = 0;
    var y1 = 0;
    var x2 = 0;
    var y2 = 0;
    var x3 = 0;
    var y3 = 0;

    if (document.documentElement)
    {
            x1 = document.documentElement.scrollLeft || 0;
            y1 = document.documentElement.scrollTop || 0;
    }
    if (document.body)
    {
            x2 = document.body.scrollLeft || 0;
            y2 = document.body.scrollTop || 0;
    }
    var x3 = window.scrollX || 0;
    var y3 = window.scrollY || 0;

    var x = Math.max(x1, Math.max(x2, x3));
    var y = Math.max(y1, Math.max(y2, y3));

    var speed = 1 + acceleration;
    window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));

    if(x &gt; 0 || y &gt; 0)
    {
            var invokeFunction = "goTop(" + acceleration + ", " + time + ")";
            window.setTimeout(invokeFunction, time);
    }
}
</code></pre>

<p>然后，创建<code>source/_includes/custom/totop.html</code>，<br/>
并添加如下代码设置返回顶部按钮样式和位置：</p>

<pre><code>&lt;!--返回顶部开始--&gt;
&lt;div id="full" style="width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;"&gt;
    &lt;a href="#" onclick="goTop();return false;"&gt;&lt;img src="http://sxgfxm.github.io/images/top.png" border=0 alt="返回顶部"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script src="http://sxgfxm.github.io/javascripts/top.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;!--返回顶部结束--&gt;
</code></pre>

<p>其中，<code>right</code>和<code>bottom</code>属性用于设置返回图片按钮的位置。</p>

<p>最后，选择自己喜爱的返回按钮图片，命名为<code>top.png</code>后添加到<code>source/images</code>目录中。</p>

<p><strong><em>注：我自己按此方法添加时，没有效果，查看网页源代码发现添加返回按钮的代码并没有加载。所以把<code>totop.html</code>文件中的内容添加到了<code>navigation.html</code>文件中，成功实现了添加返回顶部按钮。</em></strong></p>

<h3>设置在新标签中打开第三方链接</h3>

<p>Octorpress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。<br/>
将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>

<pre><code>&lt;script type="text/javascript"&gt;
function addBlankTargetForLinks () {
$('a[href^="http"]').each(function(){
    $(this).attr('target', '_blank');
});
}

$(document).bind('DOMNodeInserted', function(event) {
addBlankTargetForLinks();
});
&lt;/script&gt;
</code></pre>

<p><em>注：本站的链接还是会在当前界面中打开。</em></p>

<h3>修改标签栏logo图片</h3>

<p>选择喜欢的图片，替换<code>source</code>目录下的<code>favicon.png</code>即可。</p>

<h3>参考资料</h3>

<p><a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check - 2016-03-28]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/daily-check-2016-03-08/"/>
    <updated>2016-03-28T20:53:31+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/daily-check-2016-03-08</id>
    <content type="html"><![CDATA[<h3>Achievements</h3>

<ol>
<li>成功搭建Github Blog；</li>
<li>完成了Octopress关于基本操作的总结；</li>
<li>学习了Markdown标记语言的基本语法。</li>
</ol>


<h3>Plans</h3>

<ol>
<li>逐步总结发布Objective-C有关内容；</li>
<li>查找基于Objective-C的神经网络框架；</li>
<li>学习Octopress关于修改主题和结构的知识。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - Markdown基本语法]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-markdownji-ben-yu-fa/"/>
    <updated>2016-03-28T20:02:52+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-markdownji-ben-yu-fa</id>
    <content type="html"><![CDATA[<h2>Markdown简介</h2>

<p>Markdown是一种轻量级标语言，创始人为约翰·格鲁伯。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档”。参考wiki百科<a href="http://zh.wikipedia.org/wiki/Markdown" title="Markdown">http://zh.wikipedia.org/wiki/Markdown</a></p>

<!-- more -->


<h2>Markdown基本语法</h2>

<h3>标题</h3>

<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
</code></pre>

<h1>一级标题</h1>

<h2>二级标题</h2>

<h3>三级标题</h3>

<h4>四级标题</h4>

<h5>五级标题</h5>

<h3>列表</h3>

<p>无序列表</p>

<pre><code>- 文本1
- 文本2
- 文本3
</code></pre>

<p>有序列表</p>

<pre><code>1. 文本1
2. 文本2
3. 文本3
</code></pre>

<p><em>注：<code>-</code>，<code>1.</code>与文本之间需要用一个空格隔开。</em></p>

<h3>链接和图片</h3>

<p>在Markdown中，使用如下语法<code>[显示文本](链接地址)</code>插入链接。</p>

<pre><code>[MyBlog](http://sxgfxm.github.io)
</code></pre>

<p><a href="http://sxgfxm.github.io">MyBlog</a></p>

<p>在Markdown中，使用如下语法<code>![](图片链接地址)</code>插入图片。</p>

<pre><code>![](http://pic.58pic.com/58pic/17/80/90/5594c1a0ab869_1024.jpg)
</code></pre>

<p><img src="http://pic.58pic.com/58pic/17/80/90/5594c1a0ab869_1024.jpg" alt="" /></p>

<h3>引用</h3>

<p>引用他人的文字</p>

<pre><code>&gt; 攀登，一步一个脚印，方能知其乐
</code></pre>

<blockquote><p>攀登，一步一个脚印，方能知其乐</p></blockquote>

<h3>粗体和斜体</h3>

<pre><code>*斜体*
**粗体**
***粗斜体***
</code></pre>

<p><em>斜体</em><br/>
<strong>粗体</strong><br/>
<strong><em>粗斜体</em></strong></p>

<h3>换行</h3>

<pre><code>方法一：多个空格加回车
方法二：&lt;br/&gt;
</code></pre>

<h3>快捷键</h3>

<pre><code>粗体 ctrl+B
斜体 ctrl+I
引用 ctrl+Q
代码块 ctrl+K
</code></pre>

<h3>参考资料</h3>

<p><a href="http://www.jianshu.com/p/q81RER#">献给写作者的Markdown新手指南</a><br/>
<a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 基本操作]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-ji-ben-cao-zuo/"/>
    <updated>2016-03-28T19:43:53+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-ji-ben-cao-zuo</id>
    <content type="html"><![CDATA[<h3>创建新博文</h3>

<p><code>rake new_post["article_name"]</code><br>
会在octopress/source/_post/目录生成.markdown文件，可使用markdownpad2编辑。</p>

<h3>删除博文</h3>

<p>只需删除对应的markdown文件即可。</p>

<h3>更新博客</h3>

<p><code>rake generate</code><br>
自动生成/public目录下的展示页面。</p>

<p><code>rake preview</code><br>
本地预览，地址为<a href="http://localhost:4000" title="本地预览">http://localhost:4000</a>，<code>ctrl+C</code>终止预览。</p>

<p><code>rake deploy</code><br></p>

<h3>push到github</h3>

<p><code>git add .</code><br>
<code>git commit -m "message"</code><br>
<code>git push origin source</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 搭建]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-da-jian/"/>
    <updated>2016-03-28T19:01:23+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-da-jian</id>
    <content type="html"><![CDATA[<p>关于搭建Github Blog请查看教程<a href="http://wiki.jikexueyuan.com/project/github-page/" title="像geek一样写博客">http://wiki.jikexueyuan.com/project/github-page/</a></p>

<p>下面主要谈下自己在搭建过程中遇到的问题：</p>

<p>1、教程中访问ruby网站采用的淘宝镜像<a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a> 无法访问，需要采用<a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a> 替代。</p>

<p>2、教程中导入插件后提示<em>“Build Warning: Layout &lsquo;nil&rsquo; requested in atom.xml does not exist.”</em>错误，需要将导入的xml文件中<code>layout = nil</code> 替换为 <code>layout = null</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github Blog]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/hello-github-blog/"/>
    <updated>2016-03-28T11:43:54+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/hello-github-blog</id>
    <content type="html"><![CDATA[<p><strong>Hello world !</strong></p>

<p><strong>以此纪念独立搭建的Github Blog。</strong></p>

<p><strong>感谢Github Pages免费空间，感谢Octopress静态化博客系统。</strong></p>

<p><strong>感谢带我入门的Web前端工程师bounlusin（博客：<a href="http://bounlusin.github.io/" title="bounlusin">http://bounlusin.github.io/</a>）</strong></p>

<p><strong>感谢极客学院建立Github Blog教程 <a href="http://wiki.jikexueyuan.com/project/github-page/" title="像geek一样写博客">http://wiki.jikexueyuan.com/project/github-page/</a></strong></p>

<p><strong>If you really want it , just make everyday count !</strong></p>
]]></content>
  </entry>
  
</feed>
