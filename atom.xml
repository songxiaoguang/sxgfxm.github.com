<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2016-03-29T21:12:08+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS - RunLoop初探]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/ios-runloopchu-tan/"/>
    <updated>2016-03-29T19:39:29+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/ios-runloopchu-tan</id>
    <content type="html"><![CDATA[<h3>目录</h3>

<ul>
<li>Runloop的概念</li>
<li>Runloop与线程的关系</li>
<li>Runloop对外的接口</li>
<li>Runloop的Mode</li>
<li>Runloop的内部逻辑</li>
<li>Runloop的底层实现</li>
<li>基于Runloop的功能

<ul>
<li>AutoreleasePool</li>
<li>事件响应</li>
<li>手势识别</li>
<li>界面更新</li>
<li>定时器</li>
<li>PerformSelecter</li>
<li>关于GCD</li>
<li>关于网络请求</li>
<li>AFNetworking</li>
</ul>
</li>
</ul>


<h3>RunLoop的概念</h3>

<p>Runloop，简单来讲就是一个“运行着的循环”，而这个循环的目的是保持事件处理能力，不会执行完一个事件就退出。比如不规则的循环处理，一个保持运行状态的App，能够随时对用户的操作做出响应，并在无用户操作的情况下休眠以降低开销；再如规则的循环处理，开启的计时器NSTimer，周期性的响应某一事件，直到定时器销毁。</p>

<p>对Runloop的理解需要把握两个关键点： <br/>
- 保持对事件、消息的响应能力，直到退出；<br/>
- 当无事件、消息需要处理时，休眠以降低开销；</p>

<p>贴近编程来讲，当我们开启一个线程执行某一任务，当该任务执行完毕后，线程会退出销毁。<br/>
如果想让线程能随时执行任务并不退出，就需要上面谈到的“运行着的循环”Runloop来实现，<br/>
通常的代码逻辑如下：</p>

<pre><code>function loop() {
    initialize();
    do {
        var message = get_next_message();
        process_message(message);
    } while (message != quit);
}
</code></pre>

<p>这种模型通常被称作<strong>Event Loop</strong>。实现这种模型的关键点在于：<br/>
- 如何管理事件、消息；<br/>
- 如何让线程在没有处理消息时休眠以避免资源占用，在有消息到来时立刻被唤醒。</p>

<p>所以，Runloop实际就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面Event Loop的逻辑。<br/>
线程执行了这个函数后，就会一直处于这个函数内部“接受消息->等待->处理”的循环中，直到循环结束（比如传入quit消息），函数返回。</p>

<p>OS X/iOS 系统中，提供了两个这样的对象：<strong>NSRunLoop</strong>和<strong>CFRunLoopRef</strong>。</p>

<p>CFRunLoopRef是在CoreFundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。</p>

<p>NSRunLoop是基于CFRunLoop的封装，提供了面向对象的API，但这些API不是线程安全的。</p>

<h3>RunLoop与线程的关系</h3>

<p>通过Runloop的引入，我们很容易发现RunLoop与线程是密不可分的，Runloop是为线程服务的，使线程拥有持续响应事件的能力并在无事件时休眠。下面来看Runloop与线程到底什么关系。</p>

<p>苹果不允许直接创建RunLoop，它只提供了两个自动获取的函数：CFRunLoopGetMain()和CFRunLoopGetCurrent()。这两个函数内部的逻辑大概如下：</p>

<pre><code>/// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef
static CFMutableDictionaryRef loopsDic;
/// 访问 loopsDic 时的锁
static CFSpinLock_t loopsLock;

/// 获取一个 pthread 对应的 RunLoop。
CFRunLoopRef _CFRunLoopGet(pthread_t thread) {
    OSSpinLockLock(&amp;loopsLock);

    if (!loopsDic) {
        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。
        loopsDic = CFDictionaryCreateMutable();
        CFRunLoopRef mainLoop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);
    }

    /// 直接从 Dictionary 里获取。
    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));

    if (!loop) {
        /// 取不到时，创建一个
        loop = _CFRunLoopCreate();
        CFDictionarySetValue(loopsDic, thread, loop);
        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。
        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);
    }

    OSSpinLockUnLock(&amp;loopsLock);
    return loop;
}

CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGet(pthread_main_thread_np());
}

CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGet(pthread_self());
}
</code></pre>

<p>从上面代码可以看出：</p>

<ol>
<li><p>线程和RunLoop之间是<strong>一一对应</strong>的，其关系保存在一个全局的Dictionary里。</p></li>
<li><p>线程创建时并没有RunLoop（符合一般情况下线程的状态），只有当调用上述两个接口主动获取，且只在第一次获取时创建RunLoop，并加入到全局的Dictionary里。</p></li>
<li><p>初始化全局Dictionary时，会为主线程创建一个RunLoop。<br/>
即主线程默认开启Runloop（符合App启动后可以保持事件处理能力）。</p></li>
<li><p>当线程结束时，会销毁该线程的RunLoop。</p></li>
</ol>


<h3>RunLoop对外的接口</h3>

<p>在CoreFoundation里关于RunLoop有5个类：</p>

<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopTimerRef</li>
<li>CFRunLoopObserverRef</li>
</ul>


<p>其中CFRunLoopModeRef类并没有对外暴露，只是通过CFRunLoopRef的接口进行了封装，它们的关系如下：</p>

<p><img src="http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png" alt="" /></p>

<ul>
<li><p>一个RunLoop包含若干个<strong>Mode</strong>；</p></li>
<li><p>每个Mode又包含若干个<strong>Source</strong>/<strong>Observer</strong>/<strong>Timer</strong>；</p></li>
<li><p>每次调用RunLoop的主函数时，只能指定其中一个Mode，这个Mode被称作<strong>CurrentMode</strong>；</p></li>
<li><p>如果需要切换Mode，只能退出Loop，再重新指定一个Mode进入。这样做主要是为了分割开不同组的Source/Observer/Timer，让其互不影响。</p></li>
</ul>


<p><strong>CFRunLoopSourceRef</strong>是事件产生的地方。Source有两个版本：</p>

<ul>
<li><p><strong>Source0</strong>只包含了一个回调指针，它并不能主动出发事件。使用时需要先调用CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</p></li>
<li><p><strong>Source1</strong>包含了一个<strong>mach_port</strong>和一个回调指针，被用于通过内核和其他线程相互发送消息。这种Source能主动唤醒RunLoop的线程。</p></li>
</ul>


<p><strong>CFRunLoopTimerRef</strong>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p>

<p><strong>CFRunLoopObserveRef</strong>是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：</p>

<pre><code>typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop
    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer
    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source
    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠
    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒
    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop
};
</code></pre>

<p>上面的Source/Timer/Observer被统称为<strong>mode item</strong>。一个item可以被同时加入多个mode，但一个item被重复加入同一个mode时是不会有效果的。如果一个mode中一个item都没有，则RunLoop会直接退出，不进入循环。</p>

<h3>RunLoop的Mode</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check Chart]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/daily-check-chart/"/>
    <updated>2016-03-29T12:35:48+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/daily-check-chart</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center;"> Date          </th>
<th style="text-align:center;"> Eating </th>
<th style="text-align:center;"> Maining </th>
<th style="text-align:center;"> Coding </th>
<th style="text-align:center;"> Reading </th>
<th style="text-align:center;"> Testing </th>
<th style="text-align:center;"> Running </th>
<th style="text-align:right;"> Sleepping </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 2016-03-28  </td>
<td style="text-align:center;"> check  </td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>sfsf </th>
<th> skfsd </th>
<th> sfsf</th>
</tr>
</thead>
<tbody>
<tr>
<td>a    </td>
<td> b     </td>
<td> c</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>ABCD </th>
<th> EFGH </th>
<th> IGKL</th>
</tr>
</thead>
<tbody>
<tr>
<td>a    </td>
<td> b    </td>
<td> c</td>
</tr>
<tr>
<td>d    </td>
<td> e    </td>
<td> f</td>
</tr>
<tr>
<td>g    </td>
<td> h    </td>
<td> i</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check - 2016-03-29]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/daily-check-2016-03-29/"/>
    <updated>2016-03-29T12:26:03+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/daily-check-2016-03-29</id>
    <content type="html"><![CDATA[<h3>Achievements</h3>

<ol>
<li>成功添加了侧边栏自我介绍、微博、优秀博客、顶部返回按钮、第三方链接新标签打开、首页博文摘要等自定义设置；</li>
</ol>


<h3>Plans</h3>

<ol>
<li>添加搜索链接，标题图片；</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 界面自定义]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/29/github-blog-jie-mian-zi-ding-yi/"/>
    <updated>2016-03-29T10:34:13+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/29/github-blog-jie-mian-zi-ding-yi</id>
    <content type="html"><![CDATA[<h3>添加侧边栏</h3>

<p>首先，在<code>source\_includes\custom\asides\</code>下创建<code>name.html</code>文件，内容遵守如下格式：</p>

<pre><code>&lt;section&gt;
    &lt;h1&gt;Name&lt;/h1&gt;
    &lt;ul id="name"&gt;
    此处填写要插入的内容
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>然后，在<code>_config.yml</code>文件中设置<code>default_asides</code>添加<code>custom\asides\name.html</code>。</p>

<!-- more -->


<h3>博客首页显示文章摘要</h3>

<p>默认情况下，博客首页文章列表中都会全部展示，要想让文章在首页中只显示一部分配置如下： <br/>
首先，在文章中先要展示的缩略部分添加标记：</p>

<pre><code>&lt;!-- more --&gt;
</code></pre>

<p>然后，在<code>_config.yml</code>文件中设置<code>excerpt_link</code>为<code>"Read on &amp;rarr;"</code></p>

<pre><code>excerpt_link: "Read on &amp;rarr;"
</code></pre>

<p>即可显示如下文章摘要效果：</p>

<h3>侧边栏增加新浪微博</h3>

<p>首先，要从<a href="http://app.weibo.com/tool/weiboshow">新浪微博秀</a>获取到自定义的微博秀代码，设定好样式后将代码复制，在<code>source/_includes/custom/asides</code>目录下创建<code>weibo.html</code>，并按添加侧边栏格式插入获取的代码。</p>

<p>然后，在<code>default_asides</code>中加入<code>custom/asides/weibo.html</code>。</p>

<h3>添加返回顶部按钮</h3>

<p>首先，创建<code>source/javascripts/top.js</code>，并添加如下代码设置返回按钮事件：</p>

<pre><code>function goTop(acceleration, time)
{
    acceleration = acceleration || 0.1;
    time = time || 16;

    var x1 = 0;
    var y1 = 0;
    var x2 = 0;
    var y2 = 0;
    var x3 = 0;
    var y3 = 0;

    if (document.documentElement)
    {
            x1 = document.documentElement.scrollLeft || 0;
            y1 = document.documentElement.scrollTop || 0;
    }
    if (document.body)
    {
            x2 = document.body.scrollLeft || 0;
            y2 = document.body.scrollTop || 0;
    }
    var x3 = window.scrollX || 0;
    var y3 = window.scrollY || 0;

    var x = Math.max(x1, Math.max(x2, x3));
    var y = Math.max(y1, Math.max(y2, y3));

    var speed = 1 + acceleration;
    window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));

    if(x &gt; 0 || y &gt; 0)
    {
            var invokeFunction = "goTop(" + acceleration + ", " + time + ")";
            window.setTimeout(invokeFunction, time);
    }
}
</code></pre>

<p>然后，创建<code>source/_includes/custom/totop.html</code>，<br/>
并添加如下代码设置返回顶部按钮样式和位置：</p>

<pre><code>&lt;!--返回顶部开始--&gt;
&lt;div id="full" style="width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;"&gt;
    &lt;a href="#" onclick="goTop();return false;"&gt;&lt;img src="http://sxgfxm.github.io/images/top.png" border=0 alt="返回顶部"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script src="http://sxgfxm.github.io/javascripts/top.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;!--返回顶部结束--&gt;
</code></pre>

<p>其中，<code>right</code>和<code>bottom</code>属性用于设置返回图片按钮的位置。</p>

<p>最后，选择自己喜爱的返回按钮图片，命名为<code>top.png</code>后添加到<code>source/images</code>目录中。</p>

<p><strong><em>注：我自己按此方法添加时，没有效果，查看网页源代码发现添加返回按钮的代码并没有加载。所以把<code>totop.html</code>文件中的内容添加到了<code>navigation.html</code>文件中，成功实现了添加返回顶部按钮。</em></strong></p>

<h3>设置在新标签中打开第三方链接</h3>

<p>Octorpress博客中，默认是在当前界面中打开第三方链接，这导致网站浏览者跳到第三方链接后很难回来。<br/>
将以下代码加入<code>source/_includes/custom/head.html</code>文件中：</p>

<pre><code>&lt;script type="text/javascript"&gt;
function addBlankTargetForLinks () {
$('a[href^="http"]').each(function(){
    $(this).attr('target', '_blank');
});
}

$(document).bind('DOMNodeInserted', function(event) {
addBlankTargetForLinks();
});
&lt;/script&gt;
</code></pre>

<p><em>注：本站的链接还是会在当前界面中打开。</em></p>

<h3>修改标签栏logo图片</h3>

<p>选择喜欢的图片，替换<code>source</code>目录下的<code>favicon.png</code>即可。</p>

<h3>参考资料</h3>

<p><a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Check - 2016-03-28]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/daily-check-2016-03-08/"/>
    <updated>2016-03-28T20:53:31+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/daily-check-2016-03-08</id>
    <content type="html"><![CDATA[<h3>Achievements</h3>

<ol>
<li>成功搭建Github Blog；</li>
<li>完成了Octopress关于基本操作的总结；</li>
<li>学习了Markdown标记语言的基本语法。</li>
</ol>


<h3>Plans</h3>

<ol>
<li>逐步总结发布Objective-C有关内容；</li>
<li>查找基于Objective-C的神经网络框架；</li>
<li>学习Octopress关于修改主题和结构的知识。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - Markdown基本语法]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-markdownji-ben-yu-fa/"/>
    <updated>2016-03-28T20:02:52+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-markdownji-ben-yu-fa</id>
    <content type="html"><![CDATA[<h2>Markdown简介</h2>

<p>Markdown是一种轻量级标语言，创始人为约翰·格鲁伯。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档”。参考wiki百科<a href="http://zh.wikipedia.org/wiki/Markdown" title="Markdown">http://zh.wikipedia.org/wiki/Markdown</a></p>

<!-- more -->


<h2>Markdown基本语法</h2>

<h3>标题</h3>

<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
</code></pre>

<h1>一级标题</h1>

<h2>二级标题</h2>

<h3>三级标题</h3>

<h4>四级标题</h4>

<h5>五级标题</h5>

<h3>列表</h3>

<p>无序列表</p>

<pre><code>- 文本1
- 文本2
- 文本3
</code></pre>

<p>有序列表</p>

<pre><code>1. 文本1
2. 文本2
3. 文本3
</code></pre>

<p><em>注：<code>-</code>，<code>1.</code>与文本之间需要用一个空格隔开。</em></p>

<h3>链接和图片</h3>

<p>在Markdown中，使用如下语法<code>[显示文本](链接地址)</code>插入链接。</p>

<pre><code>[MyBlog](http://sxgfxm.github.io)
</code></pre>

<p><a href="http://sxgfxm.github.io">MyBlog</a></p>

<p>在Markdown中，使用如下语法<code>![](图片链接地址)</code>插入图片。</p>

<pre><code>![](http://pic.58pic.com/58pic/17/80/90/5594c1a0ab869_1024.jpg)
</code></pre>

<p><img src="http://pic.58pic.com/58pic/17/80/90/5594c1a0ab869_1024.jpg" alt="" /></p>

<h3>引用</h3>

<p>引用他人的文字</p>

<pre><code>&gt; 攀登，一步一个脚印，方能知其乐
</code></pre>

<blockquote><p>攀登，一步一个脚印，方能知其乐</p></blockquote>

<h3>粗体和斜体</h3>

<pre><code>*斜体*
**粗体**
***粗斜体***
</code></pre>

<p><em>斜体</em><br/>
<strong>粗体</strong><br/>
<strong><em>粗斜体</em></strong></p>

<h3>换行</h3>

<pre><code>方法一：多个空格加回车
方法二：&lt;br/&gt;
</code></pre>

<h3>快捷键</h3>

<pre><code>粗体 ctrl+B
斜体 ctrl+I
引用 ctrl+Q
代码块 ctrl+K
</code></pre>

<h3>参考资料</h3>

<p><a href="http://www.jianshu.com/p/q81RER#">献给写作者的Markdown新手指南</a><br/>
<a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 基本操作]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-ji-ben-cao-zuo/"/>
    <updated>2016-03-28T19:43:53+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-ji-ben-cao-zuo</id>
    <content type="html"><![CDATA[<h3>创建新博文</h3>

<p><code>rake new_post["article_name"]</code><br>
会在octopress/source/_post/目录生成.markdown文件，可使用markdownpad2编辑。</p>

<h3>删除博文</h3>

<p>只需删除对应的markdown文件即可。</p>

<h3>更新博客</h3>

<p><code>rake generate</code><br>
自动生成/public目录下的展示页面。</p>

<p><code>rake preview</code><br>
本地预览，地址为<a href="http://localhost:4000" title="本地预览">http://localhost:4000</a>，<code>ctrl+C</code>终止预览。</p>

<p><code>rake deploy</code><br></p>

<h3>push到github</h3>

<p><code>git add .</code><br>
<code>git commit -m "message"</code><br>
<code>git push origin source</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 搭建]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/github-blog-da-jian/"/>
    <updated>2016-03-28T19:01:23+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/github-blog-da-jian</id>
    <content type="html"><![CDATA[<p>关于搭建Github Blog请查看教程<a href="http://wiki.jikexueyuan.com/project/github-page/" title="像geek一样写博客">http://wiki.jikexueyuan.com/project/github-page/</a></p>

<p>下面主要谈下自己在搭建过程中遇到的问题：</p>

<p>1、教程中访问ruby网站采用的淘宝镜像<a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a> 无法访问，需要采用<a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a> 替代。</p>

<p>2、教程中导入插件后提示<em>“Build Warning: Layout &lsquo;nil&rsquo; requested in atom.xml does not exist.”</em>错误，需要将导入的xml文件中<code>layout = nil</code> 替换为 <code>layout = null</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github Blog]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/03/28/hello-github-blog/"/>
    <updated>2016-03-28T11:43:54+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/03/28/hello-github-blog</id>
    <content type="html"><![CDATA[<p><strong>Hello world !</strong></p>

<p><strong>以此纪念独立搭建的Github Blog。</strong></p>

<p><strong>感谢Github Pages免费空间，感谢Octopress静态化博客系统。</strong></p>

<p><strong>感谢带我入门的Web前端工程师bounlusin（博客：<a href="http://bounlusin.github.io/" title="bounlusin">http://bounlusin.github.io/</a>）</strong></p>

<p><strong>感谢极客学院建立Github Blog教程 <a href="http://wiki.jikexueyuan.com/project/github-page/" title="像geek一样写博客">http://wiki.jikexueyuan.com/project/github-page/</a></strong></p>

<p><strong>If you really want it , just make everyday count !</strong></p>
]]></content>
  </entry>
  
</feed>
